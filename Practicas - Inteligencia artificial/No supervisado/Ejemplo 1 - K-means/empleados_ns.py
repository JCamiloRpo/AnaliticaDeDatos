# -*- coding: utf-8 -*-
"""Empleados - NS

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xt96dGZyCRf3xjF4QEKO8HV0kBXNLq9g
"""

#Cargamos librerías principales
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""# 1. Preparación de Datos
-  Cargamos los datos
-  Conocemos los datos con estadísticos
- Transformación de datos  (k-means sólo analiza variables numéricas)
"""

#Cargamos los datos
data = pd.read_excel("Empleados.xlsx", sheet_name=0) # sheet_name = 0 - primera hoja
data.head()

#Conocemos los datos
data.info() #Informacion sobre cada columna, tipo y numero de registros

#Corrección del tipo de datos
data['Casado']=data['Casado'].astype('category')
data['Carro']=data['Carro'].astype('category')
data['Alq_Prop']=data['Alq_Prop'].astype('category')
data['Sindicato']=data['Sindicato'].astype('category')
data['Sexo']=data['Sexo'].astype('category')
data.info()

#Descripción de variables numéricas
print(data.describe());

#Descripción variables categóricas
data['Casado'].value_counts().plot(kind='bar')

#Descripción variables categóricas
data['Carro'].value_counts().plot(kind='bar')

#Descripción variables categóricas
data['Alq_Prop'].value_counts().plot(kind='bar')

#Descripción variables categóricas
data['Sindicato'].value_counts().plot(kind='bar')

#Descripción variables categóricas
data['Sexo'].value_counts().plot(kind='bar')

#Se codifican las categorias de las variables
data["Casado"]=data["Casado"].replace({"Sí": 1, "No": 0}) 
data["Carro"]=data["Carro"].replace({"Sí": 1, "No": 0})
data["Alq_Prop"]=data["Alq_Prop"].replace({"Alquiler": 1, "Prop": 0})
data["Sindicato"]=data["Sindicato"].replace({"Sí": 1, "No": 0})
data["Sexo"]=data["Sexo"].replace({"H": 1, "M": 0}) 
data.head()

"""# 2. Aprendizaje del Modelo: K-means"""

from sklearn.cluster import KMeans
model = KMeans(n_clusters = 3, max_iter = 100) #KMeans(n_clusters = #DeCluster, max_iter = #IteracionesMaximas)
model.fit(data)

"""# 3. Evaluación del Modelo"""

#Evalucion: inercia (distancia de los datos a los centros)
print(f'inertia del modelo = {model.inertia_}')

#Evaluacion: Silueta
from sklearn import metrics
sil = metrics.silhouette_score(data, model.predict(data))
print(f'Indice de Silueta = {sil}')

"""# 4. Perfilamiento"""

#Centroides de los clusters
centroides = pd.DataFrame(model.cluster_centers_, columns = data.columns.values)
centroides.round(0)

# 0. Mujeres Milennias
# 1. Suggar Mommy - Mujeres empoderadas
# 2. Hombres llevados

#Cluster asignado a cada registro
data['cluster'] = model.predict(data)
data.head()

#Cantidad de datos en cada cluster
pd.value_counts(data["cluster"])

"""# Nuevos empleados"""

#Cargamos los nuevos datos
data_fut = pd.read_excel("Empleados.xlsx", sheet_name=1)
data_fut.info()

#Se codifican las categorias de las variables
data_fut["Casado"]=data_fut["Casado"].replace({"Sí": 1, "No": 0}) 
data_fut["Carro"]=data_fut["Carro"].replace({"Sí": 1, "No": 0})
data_fut["Alq_Prop"]=data_fut["Alq_Prop"].replace({"Alquiler": 1, "Prop": 0})
data_fut["Sindicato"]=data_fut["Sindicato"].replace({"Sí": 1, "No": 0})
data_fut["Sexo"]=data_fut["Sexo"].replace({"H": 1, "M": 0}) 
data_fut.info()

#Se asigna el cluster más cercano con el modelo de K-means
Y_fut = model.predict(data_fut)
print(Y_fut)

"""# Prediccion de datos
1. Preparacion de datos
2. Division de los datos
3. Aprendizaje
4. Evalucacion
5. Prediccion

# 1. Preparación de Datos
-  Cargamos los datos (data)
-  Conocemos los datos con estadísticos
-  Seleccion de variables
- Limpiar atipicos
- Limpiar nulos 
- Transformación de datos (sklearn solo analiza variables numericas)

# 2. División 70-30
"""

#División 70-30
from sklearn.model_selection import train_test_split
X = data.drop("cluster", axis = 1) #Variables predictorias
Y = data['cluster'] #Variable objetivo
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, stratify=Y)
Y_train.value_counts()

"""# 3. Aprendizaje del Modelo: A) KNN"""

#Creación del modelo con el conjunto de entrenamiento
from sklearn import neighbors 
model = neighbors.KNeighborsClassifier(n_neighbors=3, metric='euclidean') #(n_neighbors=#DeVecinos, metric='TipoDeDistancia')
model.fit(X_train, Y_train)

"""# 4. Evaluación del modelo sobre el conjunto de prueba
- Exactitud
"""

#Evaluación sobre el conjunto de prueba
from sklearn import metrics

Y_pred = model.predict(X_test) 

acc=metrics.accuracy_score(Y_test, Y_pred)
print(f'Exactitud: {acc}')

"""# 5. Predicción para datos futuros

- Cargamos los datos futuros (data_fut)
- Aplicamos el modelo para la predicción
"""

#Hacemos la predicción
Y_fut = model.predict(data_fut)
print(Y_fut)