# -*- coding: utf-8 -*-
"""Prediccion de imagenes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HH47zi6-31qYjQkzOmCUnIbfad8GIhh0

#Vision Artificial - Procesamiento de imagen
"""

#Cargamos librerías principales
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

#Instalación de paquetes para tratamiento de imagenes
from PIL import Image

#Lectura de imagenes en la carpeta
import os, sys

#Lectura de la carpeta
path = "perros"
files = os.listdir(path)

mat_hist = [] #Matriz con los histograma
nombres = [] #Nombres de los archivos

#Se leen las imagenes y se calcula el histograma
for f in files:
  if f.endswith('.jpg'):
    print(f) #Nombre de la imagen
    nombres.append(f)
    img = Image.open('perros/' + f) #Leer la imagen
    hist = img.histogram() #Calculamos histograma de color
    mat_hist.append(hist) #Adicianar el histograma
  
data_perros = pd.DataFrame(mat_hist) #Data frame con los histogramas
data_perros['clase'] = "perro"

#Lectura de la carpeta
path = "gatos"
files = os.listdir(path)

mat_hist = [] #Matriz con los histograma
nombres = [] #Nombres de los archivos

#Se leen las imagenes y se calcula el histograma
for f in files:
  if f.endswith('.jpg'):
    print(f) #Nombre de la imagen
    nombres.append(f)
    img = Image.open('gatos/' + f) #Leer la imagen
    hist = img.histogram() #Calculamos histograma de color
    mat_hist.append(hist) #Adicianar el histograma
  
data_gatos = pd.DataFrame(mat_hist) #Data frame con los histogramas
data_gatos['clase'] = "gato"

data = pd.concat([data_perros, data_gatos], axis = 0)
data

#codificacion de variables
data['clase'] = data['clase'].replace({'perro':1, 'gato':0})
data

"""# 2. División 70-30"""

#División 70-30
from sklearn.model_selection import train_test_split
X = data.drop("clase", axis = 1) 
Y = data['clase']
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, stratify=Y)
Y_train.value_counts()

"""#3. Aprendizaje del modelo

#A) Arbol
"""

#Creación del modelo con el conjunto de entrenamiento
from sklearn import tree
modelA = tree.DecisionTreeClassifier(min_samples_leaf=2, max_depth=300)
modelA.fit(X_train, Y_train)


from sklearn.externals.six import StringIO 
from IPython.display import Image 
from sklearn.tree import export_graphviz
import pydotplus
dot_data = StringIO()
var_predictoras = X.columns.values
nom_clases= ['negativo','positivo']
export_graphviz(modelA, feature_names=var_predictoras, class_names= nom_clases, out_file=dot_data,filled=True, rounded=True,special_characters=True)
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  
Image(graph.create_png())

"""# B) Knn"""

#Creación del modelo con el conjunto de entrenamiento
from sklearn import neighbors
modelKnn = neighbors.KNeighborsClassifier(n_neighbors=5, metric='euclidean')
modelKnn.fit(X_train,Y_train)

"""# C)Backpropagation"""

#Creación del modelo con el conjunto de entrenamiento
from sklearn.neural_network import MLPClassifier
modelMLP = MLPClassifier(activation = "relu", hidden_layer_sizes = (385,250), 
                     learning_rate = "adaptive", learning_rate_init = 0.01,
                     momentum = 0.09, max_iter = 100, verbose = True, random_state = 1)
modelMLP.fit(X_train, Y_train)

"""# D) Deep Learning"""

#Creación del modelo con el conjunto de entrenamiento
from keras.models import Sequential
from keras.layers.core import Dense
#Red neuronal
modelDL = Sequential()
modelDL.add(Dense(400, input_dim = 768, activation = 'sigmoid'))
modelDL.add(Dense(250, activation = 'sigmoid'))
modelDL.add(Dense(80, activation = 'sigmoid'))
modelDL.add(Dense(1, activation = 'relu')) # Capa de salida
modelDL.compile(loss = 'mean_squared_error', optimizer = 'adam', metrics = ['accuracy'])
modelDL.fit(X_train, Y_train, epochs=100)

"""# 4. Evaluación del modelo sobre el conjunto de prueba
- Exactitud

#A) Arbol
"""

#Evaluación sobre el conjunto de prueba
from sklearn import metrics

Y_pred = modelA.predict(X_test)

acc=metrics.accuracy_score(Y_test, Y_pred)
print(f'Exactitud: {acc}')

"""# B) Knn"""

#Evaluación sobre el conjunto de prueba
from sklearn import metrics

Y_pred = modelKnn.predict(X_test)

acc=metrics.accuracy_score(Y_test, Y_pred)
print(f'Exactitud: {acc}')

"""# C)Backpropagation"""

#Evaluación sobre el conjunto de prueba
from sklearn import metrics

Y_pred = modelMLP.predict(X_test)

acc=metrics.accuracy_score(Y_test, Y_pred)
print(f'Exactitud: {acc}')

"""# D) Deep Learning"""

#Evaluación sobre el conjunto de prueba
from sklearn import metrics

print(f'Exactitud: {modelDL.evaluate(X_test,Y_test)}') #Exclusiva de Redes neuronales

"""# 5. Predicción para datos futuros
- Cargamos los datos futuros
- Preparamos los datos futuros y creamos tfidf
- Aplicamos el modelo para la predicción
"""

#Lectura de la carpeta
path = "futuros"
files = os.listdir(path)

mat_hist = [] #Matriz con los histograma
nombres = [] #Nombres de los archivos

#Se leen las imagenes y se calcula el histograma
for f in files:
  if f.endswith('.jpg'):
    print(f) #Nombre de la imagen
    nombres.append(f)
    img = Image.open('futuros/' + f) #Leer la imagen
    hist = img.histogram() #Calculamos histograma de color
    mat_hist.append(hist) #Adicianar el histograma
  
data_fut = pd.DataFrame(mat_hist) #Data frame con los histogramas

"""#A) Arbol"""

#Hacemos la predicción
Y_fut = modelA.predict(data_fut)
print(Y_fut.round())

"""# B) Knn"""

#Hacemos la predicción
Y_fut = modelKnn.predict(data_fut)
print(Y_fut.round())

"""# C)Backpropagation"""

#Hacemos la predicción
Y_fut = modelMLP.predict(data_fut)
print(Y_fut.round())

"""# D) Deep Learning"""

#Hacemos la predicción
Y_fut = modelDL.predict(data_fut)
print(Y_fut.round())