# -*- coding: utf-8 -*-
"""Clustering de imagenes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LM5q2MKzXPUPAkBHgS7y0n32wNL4fB0h

#Vision Artificial - Procesamiento de imagen
"""

#Cargamos librerías principales
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

#Instalación de paquetes para tratamiento de imagenes
from PIL import Image

#Lectura de imagenes en la carpeta
import os, sys

#Lectura de la carpeta
path = "imagenes"
files = os.listdir(path)

mat_hist = [] #Matriz con los histograma
nombres = [] #Nombres de los archivos

#Se leen las imagenes y se calcula el histograma
for f in files:
  if f.endswith('.jpg'):
    print(f) #Nombre de la imagen
    nombres.append(f)
    img = Image.open('imagenes/' + f) #Leer la imagen
    img = img.resize((500,500))
    hist = img.histogram() #Calculamos histograma de color
    mat_hist.append(hist) #Adicianar el histograma
  
data_hist = pd.DataFrame(mat_hist) #Data frame con los histogramas

for i in data_hist.columns:
  data_hist[i] = data_hist[i].fillna(value = 0)
data_hist

"""#2. Aprendizaje"""

#Método del codo para encontrar la mejor cantidad de clusters 
from sklearn.cluster import KMeans 
ks = range(2, 15) # crear valores del 2 al 10
inertias = []

for k in ks:
    # Crear  modelo
    model = KMeans(n_clusters=k)
    model.fit(data_hist)
    inertias.append(model.inertia_)
    
# Graficar cantidad de clusters vs inertias
plt.plot(ks, inertias, '-o')
plt.xlabel('Numero de clusters, k')
plt.ylabel('inertia')
plt.xticks(ks)

from sklearn.cluster import KMeans 
model = KMeans(n_clusters=4, max_iter=100)
model.fit(data_hist)

"""#3. Evaluación"""

#Inercia del modelo
print(f'inertia del modelo= {model.inertia_}')

#Evalucaion:Silueta
from sklearn import metrics
sil=metrics.silhouette_score(data_hist,model.predict(data_hist))
print(f'Indice de Silueta={sil}') #Como la silueta dio mayor a 0.5 se dejan los cluster elegidos

"""#4. Perfilamiento"""

#Centroides de los clusters
centroides=pd.DataFrame(model.cluster_centers_, columns=data_hist.columns.values)
centroides.round(0)

#Cluster asignado a cada registro
data_hist['cluster']=model.predict(data_hist)
data_hist

#Adicionar los nombres para saber en que clusters quedaron
data_hist['nombre'] = nombres
data_hist

#Perfilamiento
j=0
i=0
while j < 4:
  if i == 0:
    print("Cluster ", j ," :")
  if data_hist['cluster'][i] == j:
    print("   ", data_hist["nombre"][i])
  i = i+1
  if i > 14:
    j=j+1
    i=0

"""## Hist Cluster 0"""

#Graficar Histogramas de los centroides
for i in range(0, 768):
  if i < 256: 
    c = 'red'
  else:
    if i < 512:
      c = 'green'
    else:
      c = 'blue'
  plt.bar(i, height = centroides[i][0], color = c, edgecolor = c)

"""## Hist Cluster 1"""

#Graficar Histogramas de los centroides
for i in range(0, 768):
  if i < 256: 
    c = 'red'
  else:
    if i < 512:
      c = 'green'
    else:
      c = 'blue'
  plt.bar(i, height = centroides[i][1], color = c, edgecolor = c)

"""## Hist Cluster 2"""

#Graficar Histogramas de los centroides
for i in range(0, 768):
  if i < 256: 
    c = 'red'
  else:
    if i < 512:
      c = 'green'
    else:
      c = 'blue'
  plt.bar(i, height = centroides[i][2], color = c, edgecolor = c)

"""## Hist Cluster 3"""

#Graficar Histogramas de los centroides
for i in range(0, 768):
  if i < 256: 
    c = 'red'
  else:
    if i < 512:
      c = 'green'
    else:
      c = 'blue'
  plt.bar(i, height = centroides[i][3], color = c, edgecolor = c)