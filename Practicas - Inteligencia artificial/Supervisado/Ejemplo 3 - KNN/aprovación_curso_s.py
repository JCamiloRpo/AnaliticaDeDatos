# -*- coding: utf-8 -*-
"""Aprovación Curso - S.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q_pNiziRVYe25TBxN04x3xODqAm6KzHn
"""

#Cargamos librerías principales
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""# 1. Preparación de Datos
-  Cargamos los datos
-  Conocemos los datos con estadísticos
-  Seleccion de variables (eliminar ID)
- Limpiar atipicos (notas menores que 2)
- Limpiar nulos (imputación, se cambian por la moda o por la media)
- Transformación de datos (sklearn solo analiza variables numericas)
"""

#Cargamos los datos
data = pd.read_excel("AprobacionCurso.xlsx", sheet_name=0) # sheet_name = 0 - primera hoja
data.head()

#Conocemos los datos
data.info() #Informacion sobre cada columna, tipo y numero de registros

#Corrección del tipo de datos
data['Felder']=data['Felder'].astype('category')
data['Aprobo']=data['Aprobo'].astype('category')
data.info()

#Descripción de variables numéricas
print(data.describe());
data.plot.hist(bins=5);

#Descripción variables categóricas
data['Felder'].value_counts().plot(kind='bar')

#Descripción variables categóricas
data['Aprobo'].value_counts().plot(kind='bar')

#Seleccion de variables
data = data.drop('ID', axis=1) #Eliminar el ID por ser irrelevante
data.info();

#Limpiamos datos atipicos
data.Examen_admisión[data["Examen_admisión"]<3]= None #Poner en nulo los datos que sean menor a 3 de la columna Examen admision
data.info();

#Limpieza de nulos: Imputacion por media
data['Examen_admisión'] = data['Examen_admisión'].fillna(value = data['Examen_admisión'].mean()) #Poner la media en los datos nulos de la columna
data.info()

#Sklearn sólo analiza variables numéricas entonces se pasan las variables tipo category a numeros
dummiesFelder = pd.get_dummies(data['Felder']) 
data = data.drop('Felder', axis=1) #Eliminar columna original
data = data.join(dummiesFelder) #Agregar dummies
data.head()

#Se codifican las categorias de la variable objetivo
data["Aprobo"]=data["Aprobo"].replace({"si": 1, "no": 0}) 
data.head()

"""# 2. División 70-30"""

#División 70-30
from sklearn.model_selection import train_test_split
X = data.drop("Aprobo", axis = 1) #Variables predictorias
Y = data['Aprobo'] #Variable objetivo
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, stratify=Y)
Y_train.value_counts()

"""# 3. Aprendizaje del Modelo: A) KNN"""

#Creación del modelo con el conjunto de entrenamiento
from sklearn import neighbors 
model = neighbors.KNeighborsClassifier(n_neighbors=3, metric='euclidean') #(n_neighbors=#DeVecinos, metric='TipoDeDistancia')
model.fit(X_train, Y_train)

"""# B) Arbol de decisión"""

#Creación del modelo con el conjunto de entrenamiento
from sklearn import tree 
model = tree.DecisionTreeClassifier(min_samples_leaf=2, max_depth=10)
model.fit(X_train, Y_train)

from sklearn.externals.six import StringIO  
from IPython.display import Image  
from sklearn.tree import export_graphviz
import pydotplus
dot_data = StringIO()
var_predictoras = X.columns.values
nom_clases= ['no','si']
export_graphviz(model, feature_names=var_predictoras, class_names= nom_clases, out_file=dot_data,filled=True, rounded=True,special_characters=True)
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  
Image(graph.create_png())

"""# 4. Evaluación del modelo sobre el conjunto de prueba
- Exactitud
"""

#Evaluación sobre el conjunto de prueba
from sklearn import metrics

Y_pred = model.predict(X_test) 

acc=metrics.accuracy_score(Y_test, Y_pred)
print(f'Exactitud: {acc}')

"""# 5. Predicción para datos futuros

- Cargamos los datos futuros
- Aplicamos el modelo para la predicción
"""

#Cargamos los datos futuros
data_fut = pd.read_excel("AprobacionCurso-futuro.xlsx", sheet_name=0)
data_fut.head()

data_fut = data_fut.drop('ID', axis=1) #Tambien se elimina ID
dummiesFelderFut = pd.get_dummies(data_fut['Felder']) # Se cargan las dummies
data_fut = data_fut.drop('Felder', axis=1)
data_fut = data_fut.join(dummiesFelderFut)
data_fut.head()

#Hacemos la predicción
Y_fut = model.predict(data_fut)
print(Y_fut)