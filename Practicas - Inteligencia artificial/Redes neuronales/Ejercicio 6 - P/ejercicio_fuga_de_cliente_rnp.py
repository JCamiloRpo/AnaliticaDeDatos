# -*- coding: utf-8 -*-
"""Ejercicio Fuga de cliente - RNP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/161dTxe3-qLW6ZqVnk7RorvScEClvtebT

# Aprendizaje Supervisado - Redes Neuronales Profunda

1. Preparación de Datos
2. División de los datos
3. Aprendizaje del Modelo
4. Evaluación del Modelo
5. Predicción de Datos Futuros
"""

#Cargamos librerías principales
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""# 1. Preparación de Datos
-  Cargamos los datos
-  Conocemos los datos con estadísticos
- Transformación de datos  (sklearn sólo analiza variables numéricas)
"""

#Cargamos los datos
data = pd.read_excel("Churn_Model.xlsx", sheet_name="Data")
data.head()

#Conocemos los datos
data.info()

#Corrección del tipo de datos
data['Geography']=data['Geography'].astype('category') #Se corrige el tipo de dato object a category dataframe['Columna']
data['Gender']=data['Gender'].astype('category') #Se corrige el tipo de dato object a category dataframe['Columna']
data.info()

#Seleccion de variables
data = data.drop('Surname', axis=1)
data = data.drop('Id', axis = 1)
data.info()

#Descripción de variables numéricas
print(data.describe());
data.plot.hist(bins=5);

#Descripción variables categóricas
data['Geography'].value_counts().plot(kind='bar')

data["Gender"].value_counts().plot(kind='bar')

#Dummies y codificacion
dummies = pd.get_dummies(data["Geography"])
data = data.drop('Geography', axis = 1)
data = data.join(dummies)
data['Gender'] = data['Gender'].replace({"Male":1, "Female":0})
data.head()

"""# 2. División 70-30"""

#División 70-30
from sklearn.model_selection import train_test_split
X = data.drop("Exited", axis = 1) 
Y = data['Exited']
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, stratify=Y)
Y_train.value_counts()

"""# 3. Aprendizaje del Modelo: Red Neuronal Profunda"""

#Creación del modelo con el conjunto de entrenamiento
from keras.models import Sequential
from keras.layers.core import Dense
#Red neuronal
model = Sequential()
model.add(Dense(10, input_dim = 11, activation = 'relu')) # Capa de 11 entrada y capa oculta de 10 neuronas
model.add(Dense(6, activation = 'relu')) # Capa oculta de 6 neuronas
model.add(Dense(4, activation = 'relu')) # Capa oculta de 4 neuronas
model.add(Dense(1, activation = 'sigmoid')) # Capa de salida
model.compile(loss = 'mean_squared_error', optimizer = 'adam', metrics = ['accuracy'])
model.fit(X_train, Y_train, epochs=100)

"""# 4. Evaluación del modelo sobre el conjunto de prueba
- Exactitud
"""

#Evaluación sobre el conjunto de prueba
from sklearn import metrics


print(f'Exactitud: {model.evaluate(X_test,Y_test)}') #Exclusiva de Redes neuronales

"""# 5. Predicción para datos futuros

- Cargamos los datos futuros
- Aplicamos el modelo para la predicción
"""

#Cargamos los datos futuros
data_fut = pd.read_excel("Churn_Model.xlsx", sheet_name = 1)
data_fut.head()

#Corrección del tipo de datos
data_fut['Geography']=data_fut['Geography'].astype('category') #Se corrige el tipo de dato object a category dataframe['Columna']
data_fut['Gender']=data_fut['Gender'].astype('category') #Se corrige el tipo de dato object a category dataframe['Columna']
data_fut.info()

#Seleccion de variables
data_fut = data_fut.drop('Surname', axis=1)
data_fut = data_fut.drop('Id', axis = 1)
data_fut.info()

#Dummies y codificacion
dummies = pd.get_dummies(data_fut["Geography"])
data_fut =data_fut.drop('Geography', axis = 1)
data_fut = data_fut.join(dummies)
data_fut['Gender'] = data_fut['Gender'].replace({"Male":1, "Female":0})
data_fut.head()

#Hacemos la predicción
Y_fut = model.predict(data_fut)
print(Y_fut)