# -*- coding: utf-8 -*-
"""TrabajoFinal_Modelamiento.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ehmI92h77V_ZUmg8JI8kCl6Fbaf-9tUl

# Juan Camilo Restrepo Velez    000373886
# Wilder Valencia Ocampo        000375627
# Juan Esteban Herrera          000361408
# Emilio Martinez Rivera        000255600

# Aprendizaje Supervisado
1. Preparación de Datos
2. División de los datos
3. Aprendizaje del Modelo
4. Evaluación del Modelo
5. Predicción de Datos Futuros
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""# 1. Preparación de Datos"""

data =  pd.read_excel("datos_recomendador.xlsx", sheet_name=0)
data=data.drop('Duración',axis=1)
data=data.drop('Película',axis=1)
data=data[1819:2219]

"""# 2. División 70-30"""
from sklearn.model_selection import train_test_split
X = data.drop("Gusto", axis = 1) 
Y = data['Gusto']
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, stratify=Y)
Y_train.value_counts()

"""# 3. Aprendizaje del Modelo"""

"""## A) BackPropagation"""
#Creación del modelo 
from sklearn.neural_network import MLPClassifier
model_A = MLPClassifier(activation="logistic",hidden_layer_sizes=(50),
                        learning_rate="adaptive",learning_rate_init=0.01,
                        momentum=0.09,max_iter=100,verbose=True,random_state=1)
model_A.fit(X_train, Y_train)

"""##B. DeepLearning"""
#Creación del modelo 
from keras.models import Sequential
from keras.layers.core import Dense
model_B=Sequential()
model_B.add(Dense(50,input_dim=21, activation='relu'))
model_B.add(Dense(10, activation='relu'))
model_B.add(Dense(1, activation='sigmoid'))
model_B.compile(loss='mean_squared_error',optimizer='adam',metrics=['accuracy'])
model_B.fit(X_train, Y_train, epochs=100)

"""## C) Arbol de decision"""
#Creación del modelo 
from sklearn import tree
model_C = tree.DecisionTreeClassifier(min_samples_leaf=2, max_depth=20)
model_C.fit(X_train, Y_train)

"""## D) Knn"""
#Creación del modelo
from sklearn import neighbors
model_D = neighbors.KNeighborsClassifier(n_neighbors=11, metric='euclidean')
model_D.fit(X_train,Y_train)

"""# 4. Evaluación del modelo sobre el conjunto de prueba"""

"""## A) BackPropagation"""
#Evaluación sobre el conjunto de prueba
from sklearn import metrics
Y_pred = model_A.predict(X_test)
acc=metrics.accuracy_score(Y_test, Y_pred)
print(f'Exactitud BackPropagation : {acc}')

"""## B) DeepLearning"""
#Evaluación sobre el conjunto de prueba
print(f'Exactitud Aprendizaje Profundo: {model_B.evaluate(X_test, Y_test)[1]}')

"""## C) Arbol de decision"""
#Evaluación sobre el conjunto de prueba
from sklearn import metrics
Y_pred = model_C.predict(X_test)
acc=metrics.accuracy_score(Y_test, Y_pred)
print(f'Exactitud Arbol de decision: {acc}')

"""## D) Knn"""
#Evaluación sobre el conjunto de prueba
from sklearn import metrics
Y_pred = model_D.predict(X_test)
acc=metrics.accuracy_score(Y_test, Y_pred)
print(f'Exactitud Knn: {acc}')

"""# 5. Predicción para datos futuros"""
#Cargamos los datos futuros
data_fut = pd.read_excel("datos_futuros.xlsx", sheet_name=0)
data_fut = data_fut.drop('Duración',axis=1)
data_fut = data_fut.drop('Película',axis=1)
data_fut = data_fut.drop('Gusto', axis=1)

"""## A) BackPropagation"""
Y_fut = model_A.predict(data_fut)
print("Prediccion BackPropagation ", Y_fut)

"""## B) DeepLearning"""
Y_fut = model_B.predict(data_fut)
print("Prediccion DeepLearning ", Y_fut.round().tolist())

"""## C) Arbol de decision"""
Y_fut = model_C.predict(data_fut)
print("Prediccion Arbol de decision ", Y_fut)

"""## D) KNN"""
Y_fut = model_D.predict(data_fut)
print("Prediccion KNN ", Y_fut)